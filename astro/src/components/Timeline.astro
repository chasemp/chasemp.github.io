---
const { items } = Astro.props as { items: any[] };

const sorted = [...items].sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime());
---

<section class="timeline" aria-label="Timeline">
  <ol class="list" role="list">
    {sorted.map((item) => (
      <li class={`row type-${item.type}`} data-type={item.type} data-id={item.id}>
        <div class="spine">
          <span class="dot" title={item.type}></span>
        </div>
        <button class="card" data-id={item.id} data-type={item.type} aria-haspopup="dialog">
          <div class="meta">
            <span class="type">{item.type}</span>
            <time datetime={item.timestamp}>{new Date(item.timestamp).toLocaleString()}</time>
          </div>
          <div class="title">{item.title}</div>
          {item.summary && <p class="summary">{item.summary}</p>}
        </button>
      </li>
    ))}
  </ol>

  <aside class="panel" id="detail-panel" role="dialog" aria-modal="true" aria-labelledby="panel-title" hidden>
    <header class="panel-header">
      <h2 id="panel-title">Details</h2>
      <button id="panel-close" aria-label="Close">×</button>
    </header>
    <div id="panel-content"></div>
  </aside>

  <div id="tooltip" role="tooltip" hidden>
    <div class="tooltip-card">
      <div class="tooltip-title"></div>
      <div class="tooltip-meta"></div>
    </div>
  </div>
</section>

<style>
  .timeline { display: grid; grid-template-columns: 1fr minmax(320px, 420px); gap: 24px; }
  .list { list-style: none; margin: 0; padding: 0; position: relative; }
  .row { display: grid; grid-template-columns: 24px 1fr; gap: 12px; align-items: start; margin: 12px 0; }
  .spine { position: relative; height: 100%; }
  .spine::before { content: ""; position: absolute; top: 0; bottom: 0; left: 11px; width: 2px; background: var(--spine); }
  .dot { position: absolute; left: 5px; top: 10px; width: 12px; height: 12px; border-radius: 50%; background: var(--accent); box-shadow: 0 0 0 2px #0b1220; }
  .card { text-align: left; background: var(--panel); color: var(--text); border: 1px solid #1f2937; border-radius: 10px; padding: 12px; cursor: pointer; width: 100%; }
  .card:hover { border-color: #334155; }
  .meta { display: flex; gap: 10px; font-size: 12px; color: var(--muted); }
  .type { text-transform: uppercase; letter-spacing: .06em; }
  .title { font-weight: 600; margin-top: 6px; }
  .summary { margin: 6px 0 0; color: var(--muted); }
  .panel { position: sticky; top: 12px; align-self: start; height: calc(100dvh - 24px); background: var(--panel); border: 1px solid #1f2937; border-radius: 12px; padding: 12px; overflow: auto; }
  .panel[hidden] { display: none; }
  .panel-header { display: flex; align-items: center; justify-content: space-between; border-bottom: 1px solid #1f2937; padding-bottom: 8px; margin-bottom: 8px; }
  #panel-close { background: transparent; color: var(--text); border: 1px solid #334155; border-radius: 6px; padding: 2px 8px; cursor: pointer; }

  @media (max-width: 980px) {
    .timeline { grid-template-columns: 1fr; }
    .panel { position: fixed; inset: 12px; z-index: 50; }
  }

  #tooltip { position: fixed; z-index: 60; pointer-events: none; }
  .tooltip-card { background: var(--panel); border: 1px solid #1f2937; border-radius: 8px; padding: 8px 10px; box-shadow: 0 6px 18px rgba(0,0,0,0.35); max-width: 360px; }
  .tooltip-title { font-weight: 600; font-size: 14px; margin-bottom: 2px; }
  .tooltip-meta { font-size: 12px; color: var(--muted); }
 </style>

<script id="__timeline_data__" type="application/json">{JSON.stringify(sorted)}</script>

<script>
  const params = new URLSearchParams(location.search);
  const typesParam = (params.get('types') ?? '').split(',').filter(Boolean);

  function applyFilters() {
    const allowed = new Set(typesParam.length ? typesParam : Array.from(document.querySelectorAll('input[name="type"]')).map(i=>i.value));
    document.querySelectorAll('.row').forEach((row) => {
      const t = (row as HTMLElement).dataset.type;
      (row as HTMLElement).style.display = allowed.has(t!) ? '' : 'none';
    });
  }
  applyFilters();
  document.addEventListener('filters:changed', (e: any) => {
    const allowed = new Set(e.detail.types);
    document.querySelectorAll('.row').forEach((row) => {
      const t = (row as HTMLElement).dataset.type;
      (row as HTMLElement).style.display = allowed.has(t!) ? '' : 'none';
    });
  });

  const panel = document.getElementById('detail-panel')!;
  const panelContent = document.getElementById('panel-content')!;
  const closeBtn = document.getElementById('panel-close')!;

  async function openPanelFor(id: string) {
    const entry = (window as any).__TIMELINE__.find((i: any) => i.id === id);
    if (!entry) return;
    panel.removeAttribute('hidden');
    panelContent.innerHTML = `<div class="meta"><span class="type">${entry.type}</span> · <time datetime="${entry.timestamp}">${new Date(entry.timestamp).toLocaleString()}</time></div>
      <h3 style="margin:8px 0 6px">${entry.title ?? ''}</h3>
      ${entry.content_html ?? `<p>${(entry.summary ?? '').toString()}</p>`}
      ${entry.url ? `<p><a href="${entry.url}" target="_blank" rel="noopener">Open source ↗</a></p>` : ''}`;
    const p = new URLSearchParams(location.search); p.set('id', id); history.replaceState({}, '', `?${p.toString()}`);
  }
  closeBtn.addEventListener('click', () => { panel.setAttribute('hidden', ''); const p = new URLSearchParams(location.search); p.delete('id'); history.replaceState({}, '', `?${p.toString()}`); });

  document.querySelectorAll('.card').forEach((btn) => {
    btn.addEventListener('click', () => openPanelFor((btn as HTMLElement).dataset.id!));
  });

  // Tooltip
  const tooltip = document.getElementById('tooltip') as HTMLElement;
  const ttTitle = tooltip.querySelector('.tooltip-title') as HTMLElement;
  const ttMeta = tooltip.querySelector('.tooltip-meta') as HTMLElement;

  function positionTooltip(rect: DOMRect) {
    const gap = 10;
    const top = Math.min(window.innerHeight - 80, Math.max(0, rect.top + window.scrollY + gap));
    const left = Math.min(window.innerWidth - 380, Math.max(0, rect.left + window.scrollX + gap));
    tooltip.style.top = `${top}px`;
    tooltip.style.left = `${left}px`;
  }

  function showTooltipFor(el: HTMLElement) {
    const id = el.dataset.id!;
    const entry = (window as any).__TIMELINE__.find((i: any) => i.id === id);
    if (!entry) return;
    el.setAttribute('aria-describedby', 'tooltip');
    ttTitle.textContent = entry.title || '';
    const date = new Date(entry.timestamp).toLocaleString();
    ttMeta.textContent = `${entry.type} · ${date}`;
    positionTooltip(el.getBoundingClientRect());
    tooltip.removeAttribute('hidden');
  }
  function hideTooltipFor(el: HTMLElement) {
    el.removeAttribute('aria-describedby');
    tooltip.setAttribute('hidden', '');
  }

  document.querySelectorAll('.card').forEach((el) => {
    const h = el as HTMLElement;
    h.addEventListener('mouseenter', () => showTooltipFor(h));
    h.addEventListener('mouseleave', () => hideTooltipFor(h));
    h.addEventListener('focus', () => showTooltipFor(h));
    h.addEventListener('blur', () => hideTooltipFor(h));
  });

  (function bootstrapData(){
    const dataEl = document.currentScript?.previousElementSibling as HTMLElement | null;
  })();

  // Inject data global for the panel
  (window as any).__TIMELINE__ = JSON.parse(document.getElementById('__timeline_data__')!.textContent!);

  const selectedId = params.get('id');
  if (selectedId) openPanelFor(selectedId);
</script>

